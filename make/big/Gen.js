var RAD = Math.PI / 180, RAD90 = Math.PI / 2, RAD180 = Math.PI, RAD270 = 1.5 * Math.PI, RAD360 = 2 * Math.PI, CON_MM3_M3 = 1E9, CON_32ND3_FT3 = 56623104, _isMobile = "ontouchstart" in window || 0 < navigator.maxTouchPoints, _canStore = "localStorage" in window && null !== window.localStorage; function Menu_Select(a) { $(a).className = "menu-selected" }
window.addEventListener("load", function () { SetTitles(); var a, b = document.querySelectorAll("[type='range']"); for (a = 0; a < b.length; a++)null !== b[a].onchange && (b[a].oninput = b[a].onchange), b[a].addEventListener("keypress", c => { c.preventDefault() }), b[a].addEventListener("contextmenu", c => { c.currentTarget.type = "range" === c.currentTarget.type ? "number" : "range"; c.preventDefault() }); (new Image).src = ""; $("__ddSavedCalcs") && _ShowSaved(); _isMobile && $("divMobile") && ($("divMobile").style.display = "block") });
function SetCookie(a, b, c = 365) { var d = new Date; d.setDate(d.getDate() + c); document.cookie = a + "=" + b + "; expires=" + d.toUTCString() + "; path=/" } function GetCookie(a) { a += "="; for (var b = document.cookie.split(";"), c = 0; c < b.length; c++) { for (var d = b[c]; " " === d.charAt(0);)d = d.substring(1); if (0 === d.indexOf(a)) return d.substring(a.length, d.length) } return "" } function $(a) { return document.getElementById(a) }
function SetTitles() { for (var a = 0; a < document.images.length; a++)0 < document.images[a].alt.length && (document.images[a].title = document.images[a].alt) } function SetInput() { SetNumeric() } function SetNumeric() { for (var a = document.querySelectorAll(".Num, .NumAbs"), b = 0; b < a.length; b++) { var c = a[b]; _isMobile ? c.inputMode = c.id.startsWith("_") ? "decimal" : "numeric" : c.onkeydown = CheckNumeric } }
function CheckNumeric(a) { var b = a.key; if (/^(n_|__)/.test(a.target.id) && "-" === b && 0 === a.target.value.length || 0 === a.target.id.indexOf("_") && "." === b && -1 === a.target.value.indexOf(".") || "Space" != a.code && 0 <= b && 10 > b || "Backspace" === b || "Delete" === b) return !0; a.preventDefault() } var isValid = !0, _aLastValid = [];
function parseCheck(a, b, c, d, e = !1) {
    var f = $(a), g = parseFloat(f.value); if (isNaN(g) && (0 === c || e) || 0 === g && e) return f.value = e ? "" : "0", 0; if (isNaN(g) || g < c || g > d) b = b + " must be between " + c + " and " + d, e && (b += ", or leave empty"), $(a + "_Devil") ? (f.focus(), f.select()) : (e = _GetScreenCoords(f), f.focus(), f.select(), alert(b)), isValid = !1; else return $(a + "_Devil") && document.body.removeChild($(a + "_Devil")), _aLastValid[a] = g
}
function ConvertTo32ndsC(a, b, c, d, e) {
    a = $(a); e = a.value.trim(); var f = 0; if (0 === e.length) return 0; if (-1 < e.indexOf(".")) /\s/.test(e) && (e = e.replace(/\s/g, ""), a.value = e), f = 32 * e; else { -1 < e.indexOf("/") && (e = e.replace(/(\s+)?\/(\s+)?/g, " ")); var g = e.split(/\s+/g); 1 === g.length ? f = 32 * e : 2 === g.length && 1 < g[1] ? f = 32 / g[1] * g[0] : 3 === g.length && (f = 32 * g[0], f += 32 / g[2] * g[1]) } if (isNaN(f)) return alert("Invalid Entry"), a.focus(), a.select(), 0; if (f < c || f > d) b = b + " must be between " + ConEng(c, !1, 32) + " and " + ConEng(d, !1, 32), alert(b), a.focus(),
        a.select(), isValid = !1; else return f
} function Get32nds(a, b, c) { var d = 0; null !== a && (d += 384 * parseFloat($(a).value)); null !== b && (d += 32 * parseFloat($(b).value)); null !== c && (d += parseFloat($(c).value)); return d } function SetEnter() { document.onkeydown = SetCalcEnter } function SetCalcEnter(a) { "Enter" === a.key && Calculate() } function Bind(a, b, c, d) { null !== a && BindFeet(a, d); null !== b && BindInch(b, d); null !== c && BindFrac(c, d) } function BindFeet(a, b) { a = $(a); a.selectedIndex = Math.floor(b / 384) - parseInt(a.options[0].value) }
function BindInch(a, b) { a = $(a); var c = parseInt(a.options[0].value), d = parseInt(a.options[a.length - 1].value); a.selectedIndex = 0 === c && 11 === d ? Math.floor(b / 32 % 12) : Math.floor(b / 32) % (d + 1) - c } function BindFrac(a, b) { a = $(a); a.selectedIndex = Math.floor(b % 32) / (32 / a.length) } top.location !== self.location && (top.location = self.location); var conMet = !1, _isConDec = !1, _conDecPrec = 2, _den = 32;
function ConEng(a, b = !1, c = _den, d = !1) {
    if (0 === a) return "0"; if (conMet) return Math.round(.79375 * a).toString(); if (_isConDec) return RoundTo(a / 32, _conDecPrec) + '"'; 32 !== c && (a *= c / 32); var e = !1; 0 > a && (a = Math.abs(a), e = !0); var f = Math.round(a); a = 0; b ? (a = Math.floor(f / (12 * c)), b = Math.floor(f / c) % 12) : b = Math.floor(f / c); if (3 === c) f = Math.round(f % 3); else for (f %= c; 0 === f % 2 && 1 < f;)f /= 2, c /= 2; var g = ""; 0 < a && (g = CommaFormat(a) + "'"); 0 < a && (0 < b || 0 < f) && (g += "- "); 0 < b && (g += CommaFormat(b)); 0 < b && 0 < f && (g += d ? " " : "~"); 0 < f && (c = f.toString() + "/" +
        c.toString(), d && (c = "<sup>" + c.replace("/", "</sup>/<sub>") + "</sub>"), g += c); if (0 < b || 0 < f) g += '"'; 0 === g.length && (g = "0"); e && (g = "-" + g); return g
} function CommaFormat(a) { a = a.toString().split("."); a[0] = a[0].replace(/\B(?=(\d{3})+(?!\d))/g, ","); return a.join(".") } function FormatCurrency(a) { a = isNaN(a) || "" === a || null === a ? 0 : a; a = parseFloat(a).toFixed(2).split("."); return CommaFormat(a[0]) + "." + a[1] } function RoundTo(a, b) { if (0 === b) return Math.round(a); b = Math.pow(10, b); return Math.round(a * b) / b }
function FindPos(a) { var b = 0, c = 0; if (a.offsetParent) { do b += a.offsetLeft, c += a.offsetTop; while (a = a.offsetParent) } return { top: c, left: b } }
; function ShowEl(a, b) { $(a).style.display = b ? "block" : "none" } function SetText(a, b) { $(a).innerHTML = b }
function GetState() { for (var a = "", b = $("form1"), c = /text|number|decimal|range|hidden|color/, d = /radio|checkbox/, e = 0; e < b.length; e++)if (-1 === b[e].id.indexOf("__")) { var f = b[e]; c.test(f.type) ? a += f.id + ":" + ("" === f.value ? "0" : f.value) + "," : d.test(f.type) ? a += f.id + (f.checked ? ":1" : ":0") + "," : "select-one" === f.type && (a += f.id + ":" + f.selectedIndex + ",") } a = a.substring(0, a.length - 1); return encodeURIComponent(a) }
function RestoreFromQs() { const a = new URLSearchParams(window.location.search); a.get("frm") && LoadForm(decodeURIComponent(a.get("frm"))) } function LoadForm(a) { if (null !== a && 0 < a.length) { var b = /text|number|range|hidden|color/, c = /radio|checkbox/; a = decodeURIComponent(a).split(","); for (var d = 0, e = 0; e < a.length; e++)try { var f = a[e].split(":"); if (0 < f[0].length) { var g = $(f[0]); b.test(g.type) ? g.value = f[1] : c.test(g.type) ? g.checked = "1" === f[1] ? "true" : "" : "select-one" === g.type && (g.selectedIndex = f[1]) } } catch (k) { d++ } } }
function IsMobile() { return "ontouchstart" in window || 0 < navigator.maxTouchPoints } var _regFormatRunHoriz = /<br>/g, _regFormatRunVert = /, /g;
function FormatRun(a) { var b = a.innerHTML; -1 < b.indexOf(",") ? (b = b.replace(_regFormatRunVert, "<br>"), a.style.fontSize = "150%", a.style.lineHeight = "150%") : (b = b.replace(_regFormatRunHoriz, ", "), a.style.fontSize = "", a.style.lineHeight = ""); a.innerHTML = b } function ExplainImperial() { alert("Enter measurements in Inches as either decimal or fraction with a space between inches and fraction, and a space or / in fraction.\n\neg:\n\n18.75\n18 3/4\n18 3 4\n\nare all equal to 18 and 3 quarter inches.") }
function OverrideLine() { CanvasRenderingContext2D.prototype._lineTo = CanvasRenderingContext2D.prototype.lineTo; CanvasRenderingContext2D.prototype.lineTo = function (a, b) { a = Math.floor(a) + .5; b = Math.floor(b) + .5; this._lineTo(a, b) }; CanvasRenderingContext2D.prototype._moveTo = CanvasRenderingContext2D.prototype.moveTo; CanvasRenderingContext2D.prototype.moveTo = function (a, b) { a = Math.floor(a) + .5; b = Math.floor(b) + .5; this._moveTo(a, b) } }
function OverrideRect() { CanvasRenderingContext2D.prototype._strokeRect = CanvasRenderingContext2D.prototype.strokeRect; CanvasRenderingContext2D.prototype.strokeRect = function (a, b, c, d) { a = Math.floor(a) + .5; b = Math.floor(b) + .5; this._strokeRect(a, b, Math.round(c), Math.round(d)) }; CanvasRenderingContext2D.prototype._fillRect = CanvasRenderingContext2D.prototype.fillRect; CanvasRenderingContext2D.prototype.fillRect = function (a, b, c, d) { a = Math.floor(a) + .5; b = Math.floor(b) + .5; this._fillRect(a, b, Math.round(c), Math.round(d)) } }
function _Pa(a) { return Math.floor(a) + .5 } function RunList(a) { a = encodeURIComponent($(a).innerHTML.replace(/<br>/g, ",").replace(/(<([^>]+)>|\s|&nbsp;)/ig, "").replace(/[\s]?to[\s]?/g, ",")); 2040 < a.length ? alert("Too many entries") : window.open("/run-list?rd=" + a) } String.prototype.toHHMMSS = function () { var a = parseInt(this, 10), b = Math.floor(a / 3600), c = Math.floor((a - 3600 * b) / 60); a = a - 3600 * b - 60 * c; 10 > b && (b = "0" + b); 10 > c && (c = "0" + c); 10 > a && (a = "0" + a); return b + ":" + c + ":" + a };
String.prototype.TrimEnd = function (a) { return this.length >= a ? this.substring(0, this.length - a) : "" }; Array.prototype.formatRunMet = function (a) { a = a || ", "; for (var b = "", c = 0; c < this.length; c++)b += Math.round(this[c]) + a; return b.TrimEnd(a.length) }; Array.prototype.formatRunImp = function (a, b) { b = b || ", "; for (var c = "", d = 0; d < this.length; d++)c += ConEng(this[d], a, 32) + b; return c.TrimEnd(b.length) }; Number.prototype.between = function (a, b) { var c = Math.max(a, b); return this > Math.min(a, b) && this < c };
function _PrintAllCanvas() { window.open("/canvas-pdf", "PDF Print") } function ColorInc(a, b) { a = parseInt(a, 16); var c = Math.round(2.55 * b); b = (a >> 16) + c; var d = (a >> 8 & 255) + c; a = (a & 255) + c; return "#" + (16777216 + 65536 * (255 > b ? 1 > b ? 0 : b : 255) + 256 * (255 > d ? 1 > d ? 0 : d : 255) + (255 > a ? 1 > a ? 0 : a : 255)).toString(16).slice(1) } function GetPrintedScale(a, b, c) { return b / (a * (c ? 96 / 25.4 : 3)) }
function GetSpokenImp(a, b) {
    var c = a; isNaN(c) || (c = ConEng(a, b, 32)); -1 < c.indexOf("'") && -1 < c.indexOf("/") && -1 === c.indexOf("~") && (c = c.replace("-", " and ")); c = c.replace("'", " feet "); c = c.replace("~", " and "); if (-1 < c.indexOf("/")) { a = c.substring(c.indexOf("/")); a = a.substring(0, a.indexOf('"')); b = ""; switch (a) { case "/2": b = " half"; break; case "/4": b = " quarter"; break; case "/8": b = " eighth"; break; case "/16": b = " sixteenths"; break; case "/32": b = " thirty seconds"; break; case "/64": b = " sixty fourths" }c = c.replace(a, b) } c =
        c.replace('"', " inches"); return c.replace("-", " ")
} function _GetSpokenMetric(a) { if (3 < a.length) { a = CommaFormat(a); var b = a.split(","); 3 > b.length && (a = "1" === b[0] ? b[0] + " Meter " : b[0] + " Meters ", b = parseInt(b[1]), 0 < b && (100 > b && (a += " and "), a += b)) } return a }
function SetImperialSelect() {
    for (var a = document.getElementsByTagName("select"), b = 0; b < a.length; b++) {
        var c = a[b]; if (c.hasAttribute("data-type")) {
            var d, e = parseInt(c.getAttribute("data-from")) || 0, f = parseFloat(c.getAttribute("data-val")) || 0, g = c.getAttribute("data-type"); if ("Frac" === g) {
                g = parseInt(c.getAttribute("data-inc")) || 16; var k = 32 / g; var m = parseInt(c.getAttribute("data-to")) || g - 1; 0 === e && (c.options[0] = new Option("_", 0), e = 1); for (d = e; d <= m; d++) {
                    e = ConEng(d * k, !1, 32).TrimEnd(1); 0 === d % g && (e += '"'); var h = new Option(e,
                        d * k); 0 === d % 4 && (h.className = "FracOpt"); h.title = RoundTo(d * k / 32, 3) + '"'; c.options[c.options.length] = h
                } c.selectedIndex = f
            } else { m = parseFloat(c.getAttribute("data-to")) || 11; k = parseFloat(c.getAttribute("data-inc")) || 1; var l = ""; "Inch" === g ? l = '"' : "Feet" === g ? l = "'" : "Num" === g && (l = c.getAttribute("data-unit") || ""); for (d = e; d <= m; d += k)h = RoundTo(d, 4), h = new Option(0 === d ? "_" : h + l, h), c.options[c.options.length] = h, "Feet" === g && (h.title = 12 * d + '"'); c.selectedIndex = (f - e) / k }
        }
    }
}
function MinMax(a, b, c) { return Math.min(Math.max(a, b), c) } var _regFormatMetric = /(^|>|\s|\$)([\d\.,:]+)/g; function FormatMetric(a = " ") { return a.toString().replace(_regFormatMetric, "$1<span class='Atn'>$2</span>") } var _regFormatImp = /(^|>|\s|\$)([\.?\d]+['"\.-\s\d\/~:,]+)/g; function FormatImp(a) { return a.replace(_regFormatImp, "$1<span class='Atn'>$2</span>") }
function _GetScreenCoords(a) { for (var b = 0, c = 0; a !== document.body;)b += a.offsetLeft - a.scrollLeft + a.clientLeft, c += a.offsetTop - a.scrollTop + a.clientTop, a = a.offsetParent; return { x: b, y: c } } function GetUrlQR() { if ("undefined" === typeof QRCode) { var a = document.createElement("script"); a.setAttribute("type", "text/javascript"); document.getElementsByTagName("head")[0].appendChild(a); a.onload = ShowUrlQR } else ShowUrlQR() }
function _CopyAllCanvas() {
    if (0 === g_cnvss) { g_aCnvs = document.getElementsByTagName("canvas"); g_cnvss = g_aCnvs.length; var a = $("divCopyCanvas"); document.body.appendChild(a.parentNode.removeChild(a)); a.style.display = "block" } if (50 > $("divCopyCanvasAll").children.length) {
        for (a = 0; a < g_cnvss; a++) {
            var b = g_aCnvs[a], c = document.createElement("canvas"), d = c.getContext("2d"); c.width = b.width; c.height = b.height; d.drawImage(b, 0, 0); c.title = "Click to remove"; c.setAttribute("onclick", "$('divCopyCanvasAll').removeChild(this)");
            $("divCopyCanvasAll").appendChild(c)
        } 0 === $("divCopyCanvasAll").children.length ? alert("No diagrams on this page to copy") : $("divCopyCanvas").scrollIntoView()
    } else alert("Max 50 copies")
} function _ClearAllCopyCanvas() { $("divCopyCanvasAll").innerHTML = ""; $("divCopyCanvas").style.display = "none"; g_cnvss = 0 } var _isSpiritLevel = !1;
function _GetPageFit(a, b, c = !1) {
    var d = 96 / 25.4; a /= d; b /= d; if (279 > a && 215 > b) { d = "Letter"; 210 > b && (d += " or A4"); var e = "l" } else 215 > a && 279 > b ? (d = "Letter", 210 > a && (d += " or A4"), e = "p") : 297 > a && 210 > b ? (d = "A4", e = "l") : 210 > a && 297 > b ? (d = "A4", e = "p") : 420 > a && 297 > b ? (d = "A3", e = "l") : 297 > a && 420 > b ? (d = "A3", e = "p") : 594 > a && 420 > b ? (d = "A2", e = "l") : 420 > a && 594 > b ? (d = "A2", e = "p") : 841 > a && 594 > b ? (d = "A1", e = "l") : 594 > a && 841 > b ? (d = "A1", e = "p") : 1189 > a && 841 > b ? (d = "A0", e = "l") : 841 > a && 1189 > b ? (d = "A0", e = "p") : 1414 > a && 1E3 > b ? (d = "B0", e = "l") : 1E3 > a && 1414 > b ? (d = "B0",
        e = "p") : (d = "B0+", e = a > b ? "l" : "p"); return d + ("l" === e ? " Landscape" : " Portrait") + (c ? " - " + Math.round(a) + " x " + Math.round(b) : "")
};
